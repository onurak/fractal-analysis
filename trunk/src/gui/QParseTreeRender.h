#ifndef QPARSETREERENDER_H
#define QPARSETREERENDER_H

#include <QGraphicsScene>
#include <QGraphicsView>
#include <QGraphicsItem>
#include <QGraphicsLineItem>
#include <QLinkedList>
#include <QGraphicsSceneMouseEvent>
#include "../fractallib/TimeSeries.h"
#include "../fractallib/parsers/SinglePass.h"
#include "Utils.h"
#include <cmath>

class QParseTreeScene: public QGraphicsScene
{
    Q_OBJECT
public:
    QParseTreeScene(): QGraphicsScene(0)
    {

    }

    ~QParseTreeScene()
    {

    }

protected:
    void mouseMoveEvent(QGraphicsSceneMouseEvent *event)
    {
        emit mouseMove(event);
        event->accept();
    }

signals:
    void mouseMove(QGraphicsSceneMouseEvent *event);
};

enum LayerDrawingOptions
{
    ldoNone             = 0x0,
    ldoDrawTimeSeries   = 0x1  //!< Draw time series generated by layer
};

class QParseTreeRender
{
public:


public:
    QParseTreeRender();
    virtual ~QParseTreeRender();

    void setTimeSeries(FL::TimeSeries *ts);
    void timeSeriesChanged();

    void setForest(FL::Trees::Forest *forest);
    void forestChanged();

    void setView(QGraphicsView *view);

    QParseTreeScene* scene() { return m_scene; }

    bool showRoots() const { return m_showRoots; }
    void setShowRoots(bool value) { m_showRoots = value; }

protected:
    void draw();
    void drawCoordinateSystem();
    void drawParseTree(FL::Trees::Tree *tree);
    void drawForest();
    void drawTimeSeries();
    void drawTreeLayer(const FL::Trees::Layer &layer,
                       QColor color,
                       LayerDrawingOptions options = ldoNone);
private:
    bool m_showRoots;
private:
    QParseTreeScene *m_scene;
    QGraphicsView *m_view;
    FL::TimeSeries *m_ts;
    FL::Trees::Forest *m_forest;
    double m_tsYMin;
    double m_tsYMax;
    //QLinkedList<QGraphicsItem*> m_tsItems;
    //QLinkedList<QGraphicsItem*> m_coordSystemItems;
};

#endif // QPARSETREERENDER_H
